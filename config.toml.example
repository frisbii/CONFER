#########################
#   Run Dependencies    #
#########################

# Full path specifying the installation location of Vivado HLS
vhls_install_path = "C:\Xilinx\Vitis_HLS\2023.1\bin\vitis_hls.bat"

# Full path specifying the installation location of Vivado
vivado_install_path = "C:\Xilinx\Vivado\2023.1\bin\vivado.bat" 

# Full path specifying the include folder of the Hint library
hint_install_path = ""
# Full path specifying the include folder of the MArTo library
marto_install_path = ""
#TODO: ADD FUNCTIONALITY FOR ABOVE

# List of C-flags to pass to Vivado's C/C++ interpreter
#   cflags[0]   Full path specifying the location of the include directory
#               containing C++ dependencies
#   cflags[1]   An argument necessary to synthesize with dependencies
cflags = [
    "-C:\Users\mgudin27\include\marto\include",
    "-C:\Users\mgudin27\include\hint\include",
    "-std=c++0x"
]


#####################
#   Run Controls    #
#####################

# Maximum number of processes to spawn at a time when generating reports
max_processes = 6

# NONFUNCTIONAL
# Flag to determine whether to spawn a separate console for each report.
# Only one console will ever be spawned at a time. Thus, max_processes is
# de facto overriden to be equal to 1.
#spawn_console = true

# Datatypes to generate reports for
#   type        list[str]
#   contents    `name` corresponding to {name}.cpp files in ROOT/src.
datatypes = [
    'uint'
]

# Operations to generate reports for
#   type        list[str]
#   contents    `NAME` corresponding to `NAME` macros in the src files
#               which select which implemented operation to generate.
operations = [
    'MUL'
]

# Widths to generate reports for
#   type            str | list[int]
#   if type==str    Interpreted as "{start}-{end}" where `start` is the
#                   first width to generate, `end` is one greater than
#                   the last width to generate, and every integer width
#                   between these ends is generated.
#                   ex: "8-17"
#   if type==list   Only the specified integer widths are generated.
#                   ex: [4, 8, 16]
widths = [4, 6, 8, 10, 12, 14, 16]

# Part number corresponding to target Xilinx FPGA part to synthesize to
#   default: "xc7s50csga324-1" (Arty S7-50)
#   xc7k160tfbg484-1 (Kintex 7; Uguen et al. 2019)
parts = [
    "xc7k160tfbg484-1"
]

# Clock period to target for synthesis, in nanoseconds
#   default: 10ns
periods = [3]